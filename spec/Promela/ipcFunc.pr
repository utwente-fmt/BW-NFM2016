/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * IpcClientFunc-syntax.pr - Test of the ipcFunc() ops, just syntax.
 */

#define INCLUDE_SERVER_RECEIVE
#define INCLUDE_WAIT_RECEIVE
#define INCLUDE_IPC_PAYLOAD

#include "../../fluke/ResultCode.pr"
#include "../../control/wait.pr"
#include "../../fluke/Mutex.pr"
#include "../../control/ipcClientFunc.pr"
#include "../../control/ipcServerFunc.pr"

mtype = {
  FLUKE_MESSAGES
}

threadDefineInstances(1);
wqDefineInstances(1);
mutexDefineInstances(1);


proctype syntaxTest() {
  Thread currentThread = 1;
  Thread client, server;
  byte ackedIp, connectedIp, disconnectCode;
  int outWval, wval;
  ResultCode rc;
  defineIpcPickleLocals();
  
  /* XXX - fix this */
  Thread ipcf_server, ipcf_client;
  int ipcf_flags,ipcf_wval;

  ipcClientDisconnect(client);

  ipcClientFindServer(client, disconnectCode);

  ipcClient1ConnectSend(client, server, connectedIp);

  ipcClient1AckSend(client, ackedIp);

  ipcClient1Send(client, outWval);

  ipcClient2OverReceive(client, wval);

  ipcClient12Receive(client);

  ipcServerDisconnect(server);

  ipcServerFindClient(server, disconnectCode);

  ipcServer1AckSend(server, ackedIp);

  ipcServer1Send(server, outWval);

  ipcServer2WaitReceive(server, wval);

  ipcServer2OverReceive(server, wval);

  ipcServer3WaitReceive(server);

  ipcServer12Receive(server);

}

init {
  threadInitInstances(1);
  wqInitInstances(1);
  mutexInitInstances(1);
}
