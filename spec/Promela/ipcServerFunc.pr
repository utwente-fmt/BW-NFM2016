/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
#ifndef _FLUKE_KERNEL_IPC_SERVER_FUNC_
#define _FLUKE_KERNEL_IPC_SERVER_FUNC_

/*
 * Kernel functions which implement Reliable IPC
 */
/*
 * - Disconnection can only be done by one of the threads involved,
 *   never by any "third party" threads.
 *   Either thread can disconnect directly if the other is in a wait state;
 *   otherwise, the thread wanting to disconnect must cancel the other
 *   and then go into the WAIT_IPC_???_DSCN state itself.
 *
 * - Similarly, pickling and unpickling connections can only be done
 *   by one of the threads involved, and only when the other thread is waiting.
 *
 * - The current orientation (flow direction) of an active connection
 *   is always indicated by the server_sender flag in the servers ipc_state.
 *   It can only be changed by one of the threads
 *   while it is holding the other captive.
 */


#include "../fluke/EntryPoint.pr"
#include "../fluke/Thread.pr"
#include "ipcPickle.pr"
#include "portsAndPsets.pr"
#include "ipcTransfer.pr"
#include "ipcVar.pr"

/*
 * Disconnect server from its client.
 *
 * Temps: ipcf_client.
 */
#define ipcServerDisconnect(server)					\
    /*									\
     * Unpickle (if necessary) and break any reliable connection	\
     */									\
    ipcf_client = threadIPCClient(server);				\
    if									\
    :: (ipcf_client == THREAD_ID_INVALID) ->				\
	 /* client == 0 */						\
	 ipcServerUnpickle(server, 0);					\
	 /* sets rc */							\
    :: else ->								\
        rc = 0;								\
    fi;									\
    DONEWITH(ipcf_client);						\
									\
    if									\
    :: rc != 0 ->							\
         /* RETURN rc */ skip;						\
    :: else ->								\
         assert(rc == 0);						\
									\
	 /* re-get ipcf_client, in case we called ipcServerUnpickle */	\
	 ipcf_client = threadIPCClient(server);				\
									\
         if								\
         :: (ipcf_client != 0) ->					\
             assert(threadIPCServer(ipcf_client) == server);		\
	     threadWakeup(ipcf_client, WAIT_ANYTHING);			\
	     /* sets rc */						\
	     if								\
	     :: (rc != 0) ->						\
		  threadSetIPCClient(/*of*/server,			\
				     /*to*/THREAD_ID_INVALID);		\
		  threadSetIPCServer(/*of*/ipcf_client,			\
				     /*to*/THREAD_ID_INVALID);		\
	          threadReady(ipcf_client);				\
		  /* RETURN */ rc = 0;					\
	     :: else ->							\
	          assert(rc == 0);					\
	          threadWait(server, WAIT_IPC_SRV_DSCN,			\
		       ipcf_client, 0 /* cancel it */);			\
	          /* RETURN threadWait()*/				\
	     fi;							\
         :: else ->							\
	     /* RETURN */ rc = 0;					\
	 fi;								\
	 DONEWITH(ipcf_client);						\
    fi


/*
 * Ensure that the appropriate reliable connection exists and is active.
 */
#define ipcServerFindClient(server, disconnectCode)			\
									\
    assert(server == currentThread);					\
									\
    ipcf_client = threadIPCClient(server);				\
    if									\
    :: (ipcf_client == THREAD_ID_INVALID) ->				\
	 /* client == 0 */						\
	 ipcServerUnpickle(server, 0);					\
	 /* sets rc */							\
    :: else ->								\
         rc = 0;							\
    fi;									\
    DONEWITH(ipcf_client);						\
									\
    if									\
    :: rc != 0 ->							\
         /* RETURN rc */ skip;						\
    :: else ->								\
         assert(rc == 0);						\
	 /* re-get client, in case we called ipcServerUnpickle() */	\
	 ipcf_client = threadIPCClient(server);				\
         if								\
         :: (ipcf_client == THREAD_ID_INVALID) ->			\
	      /* client == 0 */						\
	      /*							\
	       * XXX in the C code, there is a difference between	\
	       * disconnectCode == FLUKE_IPC_RECV_DISCONNECTED, or not.	\
	       * The only difference is whether some registers		\
	       * are transferred or not.				\
	       * So, for us, they're the same.				\
	       */							\
	      threadSetExcStatus(server, disconnectCode);		\
	      threadSetExcEntryPoint(server, ENTRYPOINT_NOP);		\
	      /* RETURN */ rc = KR_RESTART;  				\
         :: else ->							\
	      /* RETURN */ rc = 0;					\
         fi;								\
	 DONEWITH(ipcf_client);						\
    fi



/*** Server-side reliable IPC path components ***/

#define ipcServer1AckSend(server, ackedIp)				\
									\
    ipcServerFindClient(server, FLUKE_IPC_ACK_DISCONNECTED);		\
    /* sets rc */							\
    if									\
    :: (rc != 0) ->							\
	/* RETURN rc */ skip;						\
    :: else ->								\
	ipcf_client = threadIPCClient(server);				\
	assert(ipcf_client != THREAD_ID_INVALID);			\
									\
	/* Capture the client if it's waiting to send. */		\
	threadWakeup(ipcf_client, WAIT_IPC_CLI_SENDER);			\
	/* sets rc to the wait value */					\
	if 								\
	:: (rc == 0) ->							\
	    /* wval == 0 */						\
	    /*								\
	     * Server's not in the proper wait state.			\
	     * Check the current connection direction.			\
	     */								\
	    ipcf_flags = threadIPCFlags(server);			\
	    if								\
            :: (ipcf_flags & FLUKE_THREAD_SERVER_SENDER) ->		\
                 /* C: EXC_RETURN_INSANITY(NOT_RECEIVER); */		\
		 threadSetExcStatus(server, FLUKE_INSANITY_NOT_RECEIVER); \
		 /* RETURN */ rc = KR_USER_EXCEPTION;			\
            :: else ->							\
                /*							\
                 * It's going the right direction,			\
                 * but the client just isn't ready - wait for it.	\
                 */							\
                threadWait(server, WAIT_IPC_SRV_ASEND,			\
                           ipcf_client, WAIT_IPC_CLI_SENDER);		\
                /* sets rc - return rc */				\
            fi;								\
	    DONEWITH(ipcf_flags);					\
	:: (rc != 0) && (rc != WAIT_IPC_CLI_ORECV) ->			\
            /* wval != WAIT_IPC_CLI_ORECV */				\
            assert(rc == WAIT_IPC_CLI_SEND);				\
            /*								\
             * The client is still trying to send data to us.		\
             * Just handoff to it and let it drain its message.		\
             */								\
            threadHandoff(server, WAIT_IPC_SRV_ASEND,			\
		          ipcf_server);					\
            /* sets rc - return rc */					\
	:: else ->							\
            /*								\
             * Both the client and the server are ready			\
             * to reverse, so do so.					\
             */								\
	    threadSetIPCFlags(server,					\
		FLUKE_THREAD_SERVER_SENDER|threadIPCFlags(server));	\
	    threadSetIPCFlags(ipcf_client,				\
	        threadIPCFlags(ipcf_client)&(~FLUKE_THREAD_CLIENT_SENDER)); \
            /*								\
	     * XXX At this point the C code does:			\
             *   ipcTransferMinMsg(server, ipcf_client);		\
	     * Which we don't model.					\
	     */								\
 									\
            threadSetExcEntryPoint(ipcf_client, ackedIp);		\
            threadSetExcEntryPoint(server, ENTRYPOINT_SERVER_RECEIVE);	\
 									\
            ipcReliableTransfer(server, ipcf_client);			\
            /* sets rc - return rc */					\
	fi;								\
	DONEWITH(ipcf_client);						\
    fi



#define ipcServer1Send(server, outWval)					\
    ipcServerFindClient(server, FLUKE_IPC_SEND_DISCONNECTED);		\
    /* sets rc */							\
    if									\
    :: (rc != 0) ->							\
        /* RETURN rc */ skip;						\
    :: else ->								\
        ipcf_client = threadIPCClient(server);				\
        assert(ipcf_client != THREAD_ID_INVALID);			\
 									\
        /* Capture the client if it is trying to receive */		\
        threadWakeup(ipcf_client, WAIT_IPC_CLI_RECEIVER);		\
        /* sets rc to the wait value */					\
        ipcf_wval = rc; /* XXX Just use ipcf_wval? */			\
        if								\
        :: (ipcf_wval == 0) ->						\
            /* wval == 0 */						\
	    ipcf_flags = threadIPCFlags(server);			\
            if								\
            :: (!(ipcf_flags & FLUKE_THREAD_SERVER_SENDER)) ->		\
	         /* C: EXC_RETURN_INSANITY(NOT_SENDER); */		\
		 threadSetExcStatus(server,				\
		      FLUKE_INSANITY_NOT_RECEIVER); /* XXX */		\
		/* RETURN */ rc = KR_USER_EXCEPTION;			\
            :: else ->  						\
		threadWait(server, WAIT_IPC_SRV_SEND,			\
			   ipcf_client, WAIT_IPC_CLI_RECEIVER);		\
		/* sets rc - return rc*/				\
            fi;								\
            DONEWITH(ipcf_flags);					\
        :: (ipcf_wval == WAIT_IPC_CLI_RECV) ->				\
            /* wval == WAIT_IPC_CLI_RECV */				\
            ipcReliableTransfer(server, ipcf_client);			\
            /* sets rc */						\
            if								\
            :: (rc != 0) ->						\
                /* RETURN rc */ skip;					\
            :: else ->							\
                outWval = ipcf_wval;					\
                /* RETURN */ rc = 0;					\
            fi;								\
        :: else ->							\
            /*								\
             * The impatient client is acking us before we're done.	\
             * Therefore, just throw away our send data.		\
             */								\
            assert(rc == WAIT_IPC_CLI_ASEND);				\
            outWval = ipcf_wval;					\
            /* RETURN */ rc = 0;					\
        fi;								\
        DONEWITH(ipcf_wval);						\
        DONEWITH(ipcf_client);						\
    fi

/*
 *
 * Temps: ipcf_client
 */
#define ipcServer2WaitReceive(server, wval)			\
    ipcf_client = threadIPCClient(server);			\
    /*								\
     * Break the connection with the client thread and		\
     * release it. It's much more efficient to do this		\
     * manually here than to call ipc_server_disconnect()	\
     * after releasing the client, because right now we		\
     * know the client is passive (captured), whereas		\
     * ipc_server_disconnect() would see it as "not waiting"	\
     * and cause us to sleep ourselves, producing extra		\
     * context switches.					\
     */								\
    threadSetIPCClient(/*of*/server,				\
		       /*to*/THREAD_ID_INVALID);		\
    threadSetIPCServer(/*of*/ipcf_client,			\
		       /*to*/THREAD_ID_INVALID);		\
								\
    /*								\
     * C: IPC_FINISH_RECEIVE(ipcf_client,			\
     *                       FLUKE_IPC_RECV_DISCONNECTED); 	\
     */								\
    threadSetExcStatus(ipcf_client,				\
         FLUKE_IPC_RECV_DISCONNECTED);				\
    threadSetExcEntryPoint(ipcf_client, ENTRYPOINT_NOP);	\
								\
    threadReady(ipcf_client);					\
    								\
    /* Update the server's IPC state. */			\
    threadSetExcEntryPoint(server, ENTRYPOINT_WAIT_RECEIVE);	\
								\
    /* RETURN */ sPsetWaitReceive(server)			\
    

/*
 *
 * Temps: ipcf_client
 */
#define ipcServer2OverReceive(server, wval)			\
    ipcf_client = threadIPCClient(server);			\
    assert(ipcf_client != THREAD_ID_INVALID);			\
 								\
    /*								\
     * Since the client still thinks it's receiving data,	\
     * notify it that mesage has ended.				\
     */								\
 								\
    if								\
    :: (wval == WAIT_IPC_CLI_RECV) ->				\
        /* C: IPC_FINISH_RECEIVE(ipcf_client, 0); */		\
	threadSetExcStatus(ipcf_client, 0);			\
	threadSetExcEntryPoint(ipcf_server, ENTRYPOINT_NOP);	\
    :: else ->							\
        assert(wval == WAIT_IPC_CLI_ASEND);			\
    fi;								\
								\
    /* Hand control to the client. */				\
    threadHandoff(server, WAIT_IPC_CLI_ORECV, ipcf_client);	\
    /* sets rc - return rc */
 

#define ipcServer3WaitReceive(server)				\
								\
    /* Update the server's IPC state. */			\
    threadSetExcEntryPoint(server, ENTRYPOINT_WAIT_RECEIVE);	\
								\
    /* RETURN */ sPsetWaitReceive(server)
    

#define ipcServer12Receive(server)					\
    ipcServerFindClient(server,						\
			FLUKE_IPC_RECV_DISCONNECTED);			\
    /* sets rc */							\
    if									\
    :: (rc != 0) ->							\
        /* RETURN rc */ skip;						\
    :: else ->								\
        ipcf_client = threadIPCClient(server);				\
        assert(ipcf_client != THREAD_ID_INVALID);			\
        /* capture the client thread as the sender */			\
        threadWakeup(ipcf_client, WAIT_IPC_CLI_SENDER);			\
        /* sets rc to the wait value */					\
        if								\
        :: (rc == 0) ->							\
            /* wval == 0 */						\
	    ipcf_flags = threadIPCFlags(server);			\
            if								\
            :: (ipcf_flags & FLUKE_THREAD_SERVER_SENDER) ->		\
                 /* C: EXC_RETURN_INSANITY(NOT_RECEIVER); */		\
		 threadSetExcStatus(currentThread,			\
		      FLUKE_INSANITY_NOT_SENDER);			\
		 /* RETURN */ rc = KR_USER_EXCEPTION;			\
            :: else ->							\
                threadWait(server, WAIT_IPC_SRV_RECV,			\
                           ipcf_client, WAIT_IPC_CLI_SENDER);		\
                /* sets rc - return rc */				\
            fi;								\
            DONEWITH(ipcf_flags);					\
	:: (rc == WAIT_IPC_CLI_SEND) ->					\
            threadHandoff(server, WAIT_IPC_SRV_RECV, ipcf_client);	\
            /* sets rc - return rc */					\
        :: else ->							\
	    assert((rc != 0) && (rc != WAIT_IPC_CLI_SEND));		\
            /* wval != WAIT_IPC_CLI_SEND */				\
            assert(rc == WAIT_IPC_CLI_ORECV);				\
            /* the client says it's done sending, so just return */	\
            threadReady(ipcf_client);					\
	    /* C: IPC_FINISH_RECEIVE(server, 0); */			\
	    threadSetExcStatus(ipcf_client, 0);				\
	    threadSetExcEntryPoint(ipcf_client, ENTRYPOINT_NOP);	\
            /* RETURN */ rc = KR_RESTART;				\
        fi;								\
        DONEWITH(ipcf_server);						\
    fi

#endif /* _FLUKE_KERNEL_IPC_SERVER_FUNC_ */
