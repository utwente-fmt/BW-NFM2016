/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * Link.pr - Fluke inter-kernel-object links.  In Promela these are just bits
 *           indicating active or passive, no real link reconstruction is
 *           done.
 */

#ifndef __LINK__
#define __LINK__

#include "../support/Reference.pr"
#include "Mutex.pr"

/*-- Link type --------------------------------------------------------------*/

#define Link Reference

#define LINK_INVALID nil

/*-- Link operations --------------------------------------------------------*/

#define linkProduce(link, obRef) \
  link = obRef
  
#define linkCreateCopy(srcLink, destLink) \
  destLink = srcLink

#define linkDestroy(link) \
  link = LINK_INVALID

#define linkTransfer(srcLink, destLink) \
  linkDestroy(destLink);		\
  destLink = srcLink

#define linkFollow(link, /*out*/obRef)			\
  if							\
  :: link != nil ->					\
        mutexLock(sobMutexes[link], currentThread);	\
  :: else ->						\
        assert(link == nil);				\
  fi;							\
  obRef = link

#define linkConsume(link, /*out*/obRef)		\
  linkFollow(link, /*out*/obRef);		\
  link = LINK_INVALID

/* XXX this is a "function" and evals to a compare */
#define linkComparePtr(link, obRef) 		\
  (link == obRef)

/*-- Internal ---------------------------------------------------------------*/

#endif /* __LINK__ */
