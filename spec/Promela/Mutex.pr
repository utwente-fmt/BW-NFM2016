/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * mutex.pr
 *
 * Define the mutex implementation, and then define
 * the global mutexes.
 */
#ifndef _MUTEX_PR_
#define _MUTEX_PR_

/* ---- Pick an implementation  ------ */

#include "Thread.pr"

#ifdef INCLUDE_MUTEX_SAFE
#include "Mutex-safe.pr"
#else
#include "Mutex-simple.pr"
#endif

#include "../support/Reference.pr"

/* ---- The global mutexes ---- */

/*
 * Define the following mutexes:
 * waitStateMutexes, ipcStateMutexes, and sobMutexes.
 *
 * XXX Passing in the "owner" field is silly,
 * it should just use currentThread automagically.
 *
 * XXX unlike threads, and everything else,
 * mutexes are indexed by thread id directly
 * (ie, 1 isn't subtracted off before indexing.
 */
#define mutexDefineInstances(numInstances)	\
	Mutex waitStateMutexes[numInstances];	\
	Mutex ipcStateMutexes[numInstances];	\
	Mutex rendezvousMutexes[numInstances];	\
	Mutex sobMutexes[numInstances]
/*
 * the per-thread s_ob mutex.  Indexed by threadId.
 */
#define mutexInitInstances(numInstances)		\
  d_step {						\
    Reference mutexInitIndex=0;				\
    do							\
    :: mutexInitIndex < numInstances ->			\
         mutexInit(waitStateMutexes[mutexInitIndex]);	\
         mutexInit(ipcStateMutexes[mutexInitIndex]);	\
         mutexInit(rendezvousMutexes[mutexInitIndex]);	\
         mutexInit(sobMutexes[mutexInitIndex]);		\
         mutexInitIndex++;				\
    :: else ->						\
         break;						\
    od							\
  }

#endif /* _MUTEX_PR_ */