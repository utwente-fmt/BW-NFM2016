/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
#include "../../fluke/Mutex-safe.pr"

#define N 5

Mutex m;
byte in_critical;                    /* # contenders in critical section */
                                     /* at any instant.                  */
proctype contender(byte me) {
  do
    :: 1 -> skip;                    /* Non-critical work */
            mutexLock(m,me);          /* Obtain the mutex  */
            skip;                    /* Critical work     */

            in_critical++;
            assert(in_critical==1);  /* Only one contender ever in critical */
            in_critical--;

            mutexUnlock(m,me);        /* Free the mutex    */
  od
}

init {
  byte n;

  mutexInit(m);

  atomic {
    do
      :: n<N -> run contender(n+1);
                n++;
      :: else -> break;
    od
  }
}

