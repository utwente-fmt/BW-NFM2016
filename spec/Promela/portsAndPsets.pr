/*
 * Copyright (c) 1996 The University of Utah and
 * the Computer Systems Laboratory at the University of Utah (CSL).
 * All rights reserved.
 *
 * Permission to use, copy, modify and distribute this software is hereby
 * granted provided that (1) source code retains these copyright, permission,
 * and disclaimer notices, and (2) redistributions including binaries
 * reproduce the notices in supporting documentation, and (3) all advertising
 * materials mentioning features or use of this software display the following
 * acknowledgement: ``This product includes software developed by the
 * Computer Systems Laboratory at the University of Utah.''
 *
 * THE UNIVERSITY OF UTAH AND CSL ALLOW FREE USE OF THIS SOFTWARE IN ITS "AS
 * IS" CONDITION.  THE UNIVERSITY OF UTAH AND CSL DISCLAIM ANY LIABILITY OF
 * ANY KIND FOR ANY DAMAGES WHATSOEVER RESULTING FROM THE USE OF THIS SOFTWARE.
 *
 * CSL requests users of this software to return to csl-dist@cs.utah.edu any
 * improvements that they make and grant CSL redistribution rights.
 */
/*
 * portsAndPsets.pr
 *
 * We only use two functions that interface to
 * all of ports and psets.
 *
 * We get away with as little state as possible
 * in these functions.
 *
 * We assume the rendevous point is on the server's
 * thread state, so a client needs to know which server
 * it is connecting to, a server just knows whether to
 * wait or not.
 *
 * The original semantics in Fluke are that the server
 * signal the condition var that clients block on.  If
 * no client is available.
 *
 */
#ifndef _PROMELA_CONTROL_PORTSETC_
#define _PROMELA_CONTROL_PORTSETC_

#include "../fluke/ResultCode.pr"
#include "../fluke/Thread.pr"
#include "../support/ThreadFunc.pr"

/*
 * Server blocks until client arrives, or
 * wakes client up if its already here.
 *
 * This code is odd because it encompasses all of the relevant
 * parts of the system call path down from s_pset_wait_receive().
 * Specifically, we have to mimic the behavior of a condtion
 * variable, and check for cancel pending, etc.
 *
 * XXX protect the rendezvous cond var with the server's rendezvous
 *     lock.  This is icky.  The real code uses the "pset" lock.
 *
 * XXX THIS WILL NOT WORK WITH MULTIPLE client/servers trying to
 * synchronize.  It *implicitly* assumes a single client and
 * single server.
 *
 * Returns standard rc value.
 */
#define sPsetWaitReceive(server)				\
  assert(server == currentThread);				\
								\
  /* Make sure we're not involved in any communication. */	\
  ipcServerDisconnect(server);					\
								\
  mutexLock(rendezvousMutexes[server], server);			\
  /* wakeup (and ready) a potential client. */			\
  condSignal(threadIPCRendezvousCond(server));			\
								\
  /*								\
   * Regardless, we go to sleep (so that client may capture	\
   * us, or so we'll wait until one arrives.)			\
   * Block and release the mutex.				\
   */								\
  condWait(threadIPCRendezvousCond(server),			\
           rendezvousMutexes[server])				\
  /* sets rc, return rc */


#define sPortCapture(client, server)				\
  assert(client == currentThread);				\
  assert(client != server);					\
								\
  /*								\
   * See if the server is waiting.  Server rendezvous cond is	\
   * protected by server's wait state lock.			\
   */								\
  mutexLock(rendezvousMutexes[server], currentThread);		\
  condWakeup(threadIPCRendezvousCond(server));			\
  /* sets rc to id of captured thread */			\
  if								\
  :: rc == THREAD_ID_INVALID ->					\
       /*							\
        * We block on the cond.  When we're awoken		\
	* this thread will restart the operation.		\
	*/							\
       condWait(threadIPCRendezvousCond(server),		\
                rendezvousMutexes[server]);			\
       /* sets rc, return rc */					\
  :: else ->							\
       /* We've captured the server. */				\
       mutexUnlock(rendezvousMutexes[server], currentThread);	\
       /* RETURN */ rc = 0;					\
  fi;

#endif /* _PROMELA_CONTROL_PORTSETC_ */

